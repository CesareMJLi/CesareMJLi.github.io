<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Binary Trees]]></title>
      <url>/2017/12/19/Binary-Trees/</url>
      <content type="html"><![CDATA[<h1 id="Description-of-the-binary-tree-problems"><a href="#Description-of-the-binary-tree-problems" class="headerlink" title="Description of the binary tree problems"></a>Description of the binary tree problems</h1><p><strong>Preorder Traversals</strong></p>
<p>Count the node whenever it is the first time you reach it</p>
<p><strong>Inorder Traversals</strong></p>
<p>Count the node in the order just like spanning all the nodes in the horizontal plane</p>
<ul>
<li>an algorithm in the inorder search</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x
        self<span class="token punctuation">.</span>left <span class="token operator">=</span> None
        self<span class="token punctuation">.</span>right <span class="token operator">=</span> None

<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        :type root: TreeNode
        :rtype: List[int]
        """</span>
        <span class="token comment" spellcheck="true"># curNode=root</span>
        res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        curNode<span class="token operator">=</span>root
        <span class="token keyword">while</span> curNode<span class="token operator">!=</span>None<span class="token punctuation">:</span>
            <span class="token keyword">if</span> curNode<span class="token punctuation">.</span>left<span class="token operator">==</span>None<span class="token punctuation">:</span>
                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>curNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span>
                <span class="token keyword">print</span> curNode<span class="token punctuation">.</span>val
                curNode<span class="token operator">=</span>curNode<span class="token punctuation">.</span>right
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                thisNode<span class="token operator">=</span>curNode
                curNode<span class="token operator">=</span>curNode<span class="token punctuation">.</span>left
                nextNode<span class="token operator">=</span>curNode
                <span class="token keyword">while</span> nextNode<span class="token punctuation">.</span>right<span class="token operator">!=</span>None<span class="token punctuation">:</span>
                    nextNode<span class="token operator">=</span>nextNode<span class="token punctuation">.</span>right
                nextNode<span class="token punctuation">.</span>right<span class="token operator">=</span>thisNode
                thisNode<span class="token punctuation">.</span>left<span class="token operator">=</span>None
        <span class="token keyword">return</span> res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
</code></pre>
<p><strong>Postorder Traversals</strong></p>
<p>Count the node whenever it is the last time  you leave it</p>
]]></content>
      
        
        <tags>
            
            <tag> Python, Bianry Trees </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python List]]></title>
      <url>/2017/12/09/Python-List/</url>
      <content type="html"><![CDATA[<p>This journal aims to describe a problem of PYTHON LIST. </p>
<p>The decription of the problem could be found <a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/description/" target="_blank" rel="noopener">here</a> from LEETCODE.</p>
<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.</p>
<p>For example,<br>Given 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5, return 1-&gt;2-&gt;5.<br>Given 1-&gt;1-&gt;1-&gt;2-&gt;3, return 2-&gt;3.</p>
<h1 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h1><pre><code># Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def deleteDuplicates(self, head):
        &quot;&quot;&quot;
        :type head: ListNode
        :rtype: ListNode
        &quot;&quot;&quot;
        dummyHead=ListNode(0)
        dummyHead.next=head
        curNode=dummyHead

        while curNode!=None:
            nextNode=curNode.next
            if nextNode!=None and nextNode.next!=None and nextNode.val==nextNode.next.val:
                while nextNode!=None and nextNode.next!=None and nextNode.val==nextNode.next.val:
                    nextNode=nextNode.next
                # lastNode.next=nextNode.next
                curNode.next=nextNode.next;
            else:
                curNode=curNode.next

        return dummyHead.next
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Unity Development Journal]]></title>
      <url>/2017/12/03/Unity-Development-Journal/</url>
      <content type="html"><![CDATA[<p>This journal aims to record the interesting methods and functions used in the <strong>Unity Game Development</strong>.</p>
<h1 id="Useful-External-Links"><a href="#Useful-External-Links" class="headerlink" title="Useful External Links"></a>Useful External Links</h1><p><a href="https://docs.unity3d.com/ScriptReference/index.html" target="_blank" rel="noopener">Unity Scripting API</a>: Unity official programmer API</p>
<p><a href="https://docs.unity3d.com/Manual/index.html" target="_blank" rel="noopener">Unity User Manual</a>: Unity official user manual</p>
<p><a href="https://cowlevel.net/feed" target="_blank" rel="noopener">Cow Level</a>: Game news and evaluations</p>
<p><a href="https://www.indienova.com/" target="_blank" rel="noopener">Indie Nova</a>: Game developments</p>
<h1 id="Unity-Development-Process"><a href="#Unity-Development-Process" class="headerlink" title="Unity Development Process"></a>Unity Development Process</h1><blockquote>
<p><em>Player</em></p>
<ul>
<li>Player Tranforms</li>
</ul>
</blockquote>
<pre class=" language-css"><code class="language-css">    <span class="token selector">void Start () 
    </span><span class="token punctuation">{</span>
        // Debug<span class="token number">.</span>Log <span class="token punctuation">(</span><span class="token string">"I AM "</span> + gameObject<span class="token number">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

        _transform = GetComponent&lt;Transform><span class="token punctuation">(</span><span class="token punctuation">)</span> as Transform<span class="token punctuation">;</span>
        _animator = GetComponent&lt;Animator><span class="token punctuation">(</span><span class="token punctuation">)</span> as Animator<span class="token punctuation">;</span>
        _rigidbody = GetComponent&lt;Rigidbody<span class="token number">2</span>D><span class="token punctuation">(</span><span class="token punctuation">)</span> as Rigidbody<span class="token number">2</span>D<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">void Update () 
    </span><span class="token punctuation">{</span>    
        <span class="token selector">m_horizontal = Math<span class="token class">.Sign</span>(Input<span class="token class">.GetAxis</span> ("Horizontal"));
        m_vertical = Math<span class="token class">.Sign</span>(Input<span class="token class">.GetAxis</span> ("Vertical"));    

        _transform<span class="token class">.position</span> = _transform<span class="token class">.position</span> +
            _transform<span class="token class">.right</span> * m_horizontal * m_speed * Time<span class="token class">.deltaTime</span> +
            _transform<span class="token class">.up</span> * m_vertical * m_speed * Time<span class="token class">.deltaTime</span>;

        if (Input<span class="token class">.GetKeyDown</span>(KeyCode<span class="token class">.J</span>))
        </span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">/* Whenever it detects some key on the keyboard, do Something */</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p><em>Animation</em> </p>
</blockquote>
<pre><code>Firstly, add an animation controller in the object to be attached with an animation.
Then drag the animation controller on to the game object
</code></pre><ul>
<li>Transition Control<pre class=" language-css"><code class="language-css">_animator<span class="token number">.</span><span class="token function">SetInteger</span><span class="token punctuation">(</span><span class="token string">"ParameterName"</span>,n<span class="token punctuation">)</span><span class="token punctuation">;</span>
_animator<span class="token number">.</span><span class="token function">SetBoolean</span><span class="token punctuation">(</span><span class="token string">"ParameterName"</span>,true/false<span class="token punctuation">)</span><span class="token punctuation">;</span>
_animator<span class="token number">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"ParameterName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
</ul>
<blockquote>
<p><em>Game Object</em></p>
<ul>
<li>Instantiate Prefabs</li>
</ul>
</blockquote>
<pre><code>We could create game objects according to the predefined game objects. 
First create an empty game object, and then attach this scripts into this
game object.
</code></pre><pre class=" language-css"><code class="language-css">    <span class="token selector">public class InstantiateObj : MonoBehaviour </span><span class="token punctuation">{</span>

    <span class="token selector">public Transform prefab;

    public float timeDif=0<span class="token class">.5f</span>;
    private float nextTime;

    void Start () </span><span class="token punctuation">{</span>
        nextTime=<span class="token number">0.0</span>f<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token selector">void Update () </span><span class="token punctuation">{</span>
        <span class="token selector">if(Time<span class="token class">.time</span>>nextTime)</span><span class="token punctuation">{</span>
            <span class="token function">Instantiate</span><span class="token punctuation">(</span>prefab<span class="token punctuation">)</span><span class="token punctuation">;</span>
            nextTime=nextTime+timeDif<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p><em>Sound Manager</em></p>
</blockquote>
<pre><code>Create an empty game object, and then add the sound scripts into the inspector, 
and then add different sound source and sound clips into the object. Meanwhile
we always put the audio listener onto the main camera.
</code></pre><ul>
<li><p>Sound Manager Scripts</p>
<pre class=" language-css"><code class="language-css"><span class="token selector">public class SoundManager : MonoBehaviour </span><span class="token punctuation">{</span>

<span class="token selector">public static SoundManager Instance;

<span class="token attribute">[Header("Sound Source")]</span>
public AudioSource as;
public AudioClip ac;
public AudioClip ac2;

<span class="token attribute">[Header("Soundtrack")]</span>
public AudioSource as_bgm_future;
public AudioClip ac_bgm_future;

<span class="token attribute">[Header("Soundtrack")]</span>
public AudioSource as_bgm_past;
public AudioClip ac_bgm_past;

float timeStamp;

// Use this for initialization
void Awake () </span><span class="token punctuation">{</span>
    <span class="token selector">if (Instance == null)
    </span><span class="token punctuation">{</span>
        Instance = this<span class="token punctuation">;</span>
        <span class="token function">DontDestroyOnLoad</span><span class="token punctuation">(</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">else
    </span><span class="token punctuation">{</span>
        <span class="token function">Destroy</span><span class="token punctuation">(</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token selector">void Start()</span><span class="token punctuation">{</span>
    as_bgm_future<span class="token number">.</span>clip = ac_bgm_future<span class="token punctuation">;</span>
    as_bgm_past<span class="token number">.</span>clip = ac_bgm_past<span class="token punctuation">;</span>
    as_bgm_future<span class="token number">.</span><span class="token function">Play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">public void PlayeOneTime()</span><span class="token punctuation">{</span>
    as<span class="token number">.</span><span class="token function">PlayOneShot</span><span class="token punctuation">(</span>ac<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">public void SwitchBGMandPitch(bool flag)</span><span class="token punctuation">{</span>
    <span class="token selector">as_bgm_past<span class="token class">.pitch</span>=1<span class="token class">.0f</span>;
    as_bgm_future<span class="token class">.pitch</span>=1<span class="token class">.0f</span>;
    if (flag)</span><span class="token punctuation">{</span>
        as_bgm_past<span class="token number">.</span><span class="token function">Pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        as_bgm_future<span class="token number">.</span><span class="token function">Play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token selector">else</span><span class="token punctuation">{</span>
        as_bgm_future<span class="token number">.</span><span class="token function">Pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        as_bgm_past<span class="token number">.</span><span class="token function">Play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
</li>
<li>Whenever it is used in another scripts<pre class=" language-css"><code class="language-css">SoundManager<span class="token number">.</span>Instance<span class="token number">.</span><span class="token function">FutureTravelToPast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
</ul>
<blockquote>
<p><em>Camera</em></p>
<ul>
<li>Camera Following</li>
</ul>
</blockquote>
<pre class=" language-css"><code class="language-css"><span class="token selector">public class CameraFollow : MonoBehaviour </span><span class="token punctuation">{</span>
    <span class="token selector">public GameObject player;
    private Vector3 offset;

    void Start () </span><span class="token punctuation">{</span>
        // offset = transform<span class="token number">.</span>position - player<span class="token number">.</span>transform<span class="token number">.</span>position<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token selector">void Update () </span><span class="token punctuation">{</span>
        Vector<span class="token number">3</span> playerPosition =player<span class="token number">.</span>transform<span class="token number">.</span>position<span class="token punctuation">;</span>
        // transform<span class="token number">.</span>position = player<span class="token number">.</span>transform<span class="token number">.</span>position + offset<span class="token punctuation">;</span>
        // if <span class="token punctuation">(</span>playerPosition<span class="token number">.</span>x&lt;-<span class="token number">2.3</span><span class="token punctuation">)</span>
        //     return<span class="token punctuation">;</span>
        transform<span class="token number">.</span>position = new Vector<span class="token number">3</span><span class="token punctuation">(</span>playerPosition<span class="token number">.</span>x,<span class="token number">0</span>,-<span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h1 id="Some-Tricks"><a href="#Some-Tricks" class="headerlink" title="Some Tricks"></a>Some Tricks</h1><blockquote>
<ol>
<li>The image size of the animation must by unified. Or some effects terrible would happen. All the images must by saved in .png with a tranparent background</li>
<li>Generally speaking, it is always a good idea to put <em>Player</em>, <em>Camera</em>, <em>Sound Manager</em> in a empty game object to manage them.</li>
</ol>
</blockquote>
<h2 id="Cesare-Dec-3-2017"><a href="#Cesare-Dec-3-2017" class="headerlink" title="Cesare Dec 3 2017"></a>Cesare Dec 3 2017</h2>]]></content>
      
        
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Picapicacuuu]]></title>
      <url>/2017/11/30/Picapicacuuu/</url>
      <content type="html"><![CDATA[<p>This is a basic idea of a unity Game</p>
<p><em>A small doodle try to save his lover in a cell phone infected by a scary virsus. It transformed the GoogleMap, Photos, Facebook, instagram into enemies. Go throught all the APPs and reached the final destination, fight with the big bad virsus monster!</em></p>
]]></content>
      
        
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Text Test]]></title>
      <url>/2017/11/30/Text-Test/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[A Simple Python Depth First Search]]></title>
      <url>/2017/11/30/A-Simple-Python-Depth-First-Search/</url>
      <content type="html"><![CDATA[<h1 id="Description-of-8-queens-Problem"><a href="#Description-of-8-queens-Problem" class="headerlink" title="Description of 8-queens Problem"></a>Description of 8-queens Problem</h1><p>Here is the description of <a href="https://leetcode.com/problems/n-queens/description/" target="_blank" rel="noopener">8-QUEEN PROBLEM</a>.</p>
<p>The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other.</p>
<p>Given an integer n, return all distinct solutions to the n-queens puzzle.</p>
<p>Each solution contains a distinct board configuration of the n-queens’ placement, where ‘Q’ and ‘.’ both indicate a queen and an empty space respectively</p>
<img src="/2017/11/30/A-Simple-Python-Depth-First-Search/example.png" title="This is an example image">
<blockquote>
<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</p>
<blockquote>
<p>And Here is a nested quote block.</p>
</blockquote>
<p>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>
<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p>
</blockquote>
<ul>
<li><p>This is a list item with two paragraphs.</p>
<p>This is the second paragraph in the list item. You’re<br>only required to indent the first line. Lorem ipsum dolor<br>sit amet, consectetuer adipiscing elit.</p>
</li>
<li><p>Another item in the same list.</p>
<blockquote>
<p>This is a quote.</p>
</blockquote>
</li>
</ul>
<p><em>single asterisks</em></p>
<p><em>single underscores</em></p>
<p><strong>double asterisks</strong></p>
<p><strong>double underscores</strong></p>
<h1 id="Solution-in-python-DFS"><a href="#Solution-in-python-DFS" class="headerlink" title="Solution(in python - DFS)"></a>Solution(in python - DFS)</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">solveNQueens</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""
        :type n: int
        :rtype: List[List[str]]
        """</span>
        <span class="token keyword">def</span> <span class="token function">DFS</span><span class="token punctuation">(</span>queens<span class="token punctuation">,</span> xy_dif<span class="token punctuation">,</span>xy_sum<span class="token punctuation">)</span><span class="token punctuation">:</span>
            l<span class="token operator">=</span>len<span class="token punctuation">(</span>queens<span class="token punctuation">)</span>
            <span class="token keyword">if</span> l<span class="token operator">==</span>n<span class="token punctuation">:</span>
                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>queens<span class="token punctuation">)</span>
                <span class="token keyword">return</span> None
            <span class="token keyword">for</span> p <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> p <span class="token operator">not</span> <span class="token keyword">in</span> queens <span class="token operator">and</span> l<span class="token operator">-</span>p <span class="token operator">not</span> <span class="token keyword">in</span> xy_dif <span class="token operator">and</span> l<span class="token operator">+</span>p <span class="token operator">not</span> <span class="token keyword">in</span> xy_sum<span class="token punctuation">:</span>
                    DFS<span class="token punctuation">(</span>queens<span class="token operator">+</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span>xy_dif<span class="token operator">+</span><span class="token punctuation">[</span>l<span class="token operator">-</span>p<span class="token punctuation">]</span><span class="token punctuation">,</span>xy_sum<span class="token operator">+</span><span class="token punctuation">[</span>l<span class="token operator">+</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span>
        result<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
        DFS<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> result
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'.'</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token string">'Q'</span><span class="token operator">+</span><span class="token string">'.'</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> sol<span class="token punctuation">]</span><span class="token keyword">for</span> sol <span class="token keyword">in</span> result<span class="token punctuation">]</span>
</code></pre>
<pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="Author-Cesare-Nov-30-2017"><a href="#Author-Cesare-Nov-30-2017" class="headerlink" title="Author Cesare Nov 30 2017"></a>Author Cesare Nov 30 2017</h2>]]></content>
      
        
        <tags>
            
            <tag> Python Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Edinburgh Journal]]></title>
      <url>/2017/11/30/Edinburgh-Journal/</url>
      <content type="html"><![CDATA[<p>This is a writing test for HEXO</p>
<blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>
</blockquote>
<blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>
<footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote>
<blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io" target="_blank" rel="noopener">http://devdocs.io</a></p>
<footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752" target="_blank" rel="noopener">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote>
<blockquote><p>Every interaction is both precious and an opportunity to delight.</p>
<footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html" target="_blank" rel="noopener">Welcome to Island Marketing</a></cite></footer></blockquote>]]></content>
      
        
    </entry>
    
  
  
</search>
