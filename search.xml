<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Algorithm and Complexity Analysis]]></title>
      <url>/2018/03/14/Algorithm-and-Complexity-Analysis/</url>
      <content type="html"><![CDATA[<p>EG: THe Problem of sorting</p>
<p>Input: sequence (a1, a2, …, an) of numbers. </p>
<p>Output: permutation (a’1, a’2, …, a’n) such<br>    that a’1 &lt;= a’2 &lt;= … &lt;= a’n.</p>
<pre><code>///ONE SOLUTION: INSERTION SORT///

void insertion_sort(std::vector&lt;int&gt; &amp;A)
{
    int i;
    int j;
    int value;
    for(i=1; i&lt;A.size(); i++)
    {
       value = A[i];
       j = i-1;
       while(j&gt;=0 &amp;&amp; A[j]&gt;value)
       {
            A[j+1] = A[j];
            j = j-1; 
        }
       A[j+1] = value;
    }
}
</code></pre><ul>
<li>Running Time</li>
</ul>
<p>The running time depends on the input: an already sorted sequence is easier to sort.</p>
<p>Parameterize the running time by the size of the input, since short sequences are easier to sort than long ones.</p>
<p>Generally, we seek upper bounds on the running time, because everybody likes a guarantee.</p>
<ul>
<li>Kinds of Analysis</li>
</ul>
<p>Worst-case: (usually)</p>
<p>T(n) = maximum time of algorithm on any input of size n. </p>
<p>Average-case: (sometimes)</p>
<p>T(n) = expected time of algorithm over all inputs of size n.</p>
<p>Need assumption of statistical distribution of inputs.</p>
<p>Best-case: (bogus)</p>
<p>Cheat with a slow algorithm that works fast on some input.</p>
<ul>
<li>Machine-Independent Time</li>
</ul>
<p>What is insertion sort’s worst-case time?</p>
<p>It depends on the speed of our computer: </p>
<p>relative speed (on the same machine),</p>
<p>absolute speed (on different machines).</p>
<p>BIG IDEA:</p>
<p> Ignore machine-dependent constants. </p>
<p> Look at growth of T(n) as n → ∞ .</p>
<ul>
<li>Q-notation</li>
</ul>
<p>MATH: Q(g(n)) = { f (n) :there exist positive constants c1, c2, and   n0 such that 0 &lt;= c1g(n) &lt;= f (n) &lt;= c2g(n) for all n &gt;= n0 }</p>
<p>ENGINEERING: Drop low-order terms; ignore leading constants.Example: 3n^3 + 90n^2 – 5n + 6046 = Q(n^3)</p>
<p>Here get back to the example of insertion analysis:<br>• Worst case: Input reverse sorted.<br>T(n)=Σ(j=2…n)Q(j)=Q(n^2</p>
<p>While in the Merge-Sort<br>MERGE-SORT A[1 . . n] 1. </p>
<ol>
<li>If n = 1, done.</li>
<li>Recursively sort A[ 1,…,[n/2] ] and A[ [n/2]+1,…,n ] .</li>
<li>“Merge” the 2 sorted lists.</li>
</ol>
<pre><code>void merge_sort(std::vector&lt;int&gt; &amp;A)
{
    std::vector&lt;int&gt; A1;
    std::vector&lt;int&gt; A2;
    if (A.size()==1) return;
    for(int i=0; i&lt;A.size()/2; i++)
            A1.push_back(A[i]);
    for(int i=A.size()/2; i&lt;A.size(); i++)
            A2.push_back(A[i]);
    merge_sort(A1); 
    merge_sort(A2);
    A = merge(A1,A2);
}
</code></pre><p>The complexity of merge sort is</p>
<p>if n=1: T(n)=Q(1)</p>
<p>if n&gt;1: T(n)=2T(n/2) + Q(n)</p>
<p>Since there is lg(n) levels, and for eahc level the cost of merge is n so the total cost is nlg(n).</p>
<ul>
<li>O-Notation(Upper Bounds)</li>
</ul>
<p>We write f(n) = O(g(n)) if there exist constants c &gt; 0, n0 &gt; 0 such that 0 &lt;= f(n) &lt;= cg(n) for all n &gt;= n0.</p>
<p>O(g(n)) = { f(n) : there exist constants c &gt; 0, n0 &gt; 0 such that 0 &lt;= f(n) &lt;= cg(n) for all n &gt;= n0 }</p>
<p>[O(g(n)) noted a whole class of algorithms whos upper bound complexity  is O(g(n))]</p>
<img src="/2018/03/14/Algorithm-and-Complexity-Analysis/Algorithms.jpg" title="This is an example for time complexity in O">
<ul>
<li>Marco Substitution</li>
</ul>
<p>Convention: A set in a formula represents an anonymous function in the set.</p>
<pre><code>    EXAMPLE1:
        f(n)=n^3+O(n^2)
        MEANS
        f(n)=n^3+h(n)
        FOR SOME h(n) belongs to O(n^2)
</code></pre><pre><code>    EXAMPLE2:
        n^2+O(n)=O(n^2)
        MEANS
        FOR ANY f(n) belongs to O(n)
            n^2+f(n)=h(n)
            FOR SOME h(n) belongs to O(n^2)
</code></pre><ul>
<li>Omega-Notation</li>
</ul>
<p>Omega(g(n)) = { f(n) : there exist constants c &gt; 0, n0 &gt; 0 such that 0 &lt;= cg(n) &lt;= f(n) for all n &gt;= n0 }</p>
<ul>
<li>Boundary Conditions</li>
</ul>
<img src="/2018/03/14/Algorithm-and-Complexity-Analysis/BoundaryConditions.png">
<ul>
<li>Common Cases</li>
</ul>
<img src="/2018/03/14/Algorithm-and-Complexity-Analysis/CommonCase1.png">
<img src="/2018/03/14/Algorithm-and-Complexity-Analysis/CommonCase2.png">
]]></content>
      
        
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> POLIMI </tag>
            
            <tag> Parallel Programming </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Jupyter Notebook of Machine Learning]]></title>
      <url>/2018/03/12/Jupyter-Notebook-of-Machine-Learning/</url>
      <content type="html"><![CDATA[<p>This is a studying ntoe in the process of the application of Jupyter Notebook in Machine Learning.</p>
<p>Starting from a basic example of the Iris-Analysis</p>
<pre><code>    # dataframe management
    import pandas as pd

    # numerical computation
    import numpy as np

    # visualization library
    import seaborn as sns
    sns.set(style=&quot;white&quot;, color_codes=True)
    sns.set_context(rc={&quot;font.family&quot;:&#39;sans&#39;,&quot;font.size&quot;:24,&quot;axes.titlesize&quot;:24,&quot;axes.labelsize&quot;:24})


    # import matplotlib and allow it to plot inline
    import matplotlib.pyplot as plt
    %matplotlib inline

    # seaborn can generate several warnings, we ignore them
    import warnings
    warnings.filterwarnings(&quot;ignore&quot;)
</code></pre><ul>
<li><p><a href="https://pandas.pydata.org/" target="_blank" rel="noopener">Pandas</a> is an open source, BSD-licensed library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language.</p>
<p>Generally speaking, the basic load of information could be done by pandas function</p>
</li>
<li><p><a href="http://www.numpy.org/" target="_blank" rel="noopener">NumPy</a>’s main object is the homogeneous multidimensional array. It is a table of elements (usually numbers), all of the same type, indexed by a tuple of positive integers. In NumPy dimensions are called axes. The number of axes is rank.</p>
<p>For example NumPy could be used to return the max/min values of one column of values</p>
</li>
<li><p><a href="https://seaborn.pydata.org/" target="_blank" rel="noopener">Seaborn</a> is a Python visualization library based on matplotlib. It provides a high-level interface for drawing attractive statistical graphics.</p>
</li>
<li><p><a href="https://matplotlib.org/" target="_blank" rel="noopener">Matplotlib</a> is a Python 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms. Matplotlib can be used in Python scripts, the Python and IPython shells, the Jupyter notebook, web application servers, and four graphical user interface toolkits.</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Machine Learning </tag>
            
            <tag> Jupyter Notebook </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Game Concept Art Design]]></title>
      <url>/2018/01/31/Game-Concept-Art-Design/</url>
      <content type="html"><![CDATA[<p>This is a general gallery for the art design I made, as a raw material for future use.</p>
<p>Photoshop Art Design<br>1.<br><img src="/2018/01/31/Game-Concept-Art-Design/ArtDesign1.jpg" title="practice on PS"></p>
<p>2.<br><img src="/2018/01/31/Game-Concept-Art-Design/ArtDesign2.jpg" title="logo or Scarlet Games"></p>
<p>Paper Art Design<br>1.<br><img src="/2018/01/31/Game-Concept-Art-Design/1.jpg" title="A hero and his company, a girl called Vanillla"></p>
<p>2.<br><img src="/2018/01/31/Game-Concept-Art-Design/2.jpg" title="Ugly Princess"></p>
<p>3.<br><img src="/2018/01/31/Game-Concept-Art-Design/3.jpg" title="Monster, Shank, and Clap-Trap-Source"></p>
<p>4.<br><img src="/2018/01/31/Game-Concept-Art-Design/4.jpg" title="Cazio and Sir Lione"></p>
<p>5.<br><img src="/2018/01/31/Game-Concept-Art-Design/5.jpg" title="Porry Hatter and Ginaruto"></p>
<p>6.<br><img src="/2018/01/31/Game-Concept-Art-Design/6.jpg" title="Black Dragon"></p>
<p>7.<br><img src="/2018/01/31/Game-Concept-Art-Design/7.jpg" title="Frankeinstana"></p>
<p>8.<br><img src="/2018/01/31/Game-Concept-Art-Design/8.jpg" title="Captain Pissoff and King Kong"></p>
<p>9.<br><img src="/2018/01/31/Game-Concept-Art-Design/9.jpg" title="Blizzardtrooper and General Noface"></p>
<p>10.<br><img src="/2018/01/31/Game-Concept-Art-Design/10.jpg" title="WUKONG"></p>
<p>11.<br><img src="/2018/01/31/Game-Concept-Art-Design/11.jpg" title="Mr Li and Cowboy"></p>
<p>12.<br><img src="/2018/01/31/Game-Concept-Art-Design/12.jpg" title="SpongePOP"></p>
<p>13.<br><img src="/2018/01/31/Game-Concept-Art-Design/13.jpg" title="Skeleton Monster and Super bad bad bad bad bad loli"></p>
<p>14.<br><img src="/2018/01/31/Game-Concept-Art-Design/14.jpg" title="Middle Age Crysis"></p>
<p>15.<br><img src="/2018/01/31/Game-Concept-Art-Design/15.jpg" title="Background"></p>
]]></content>
      
        
        <tags>
            
            <tag> Game Development </tag>
            
            <tag> Art Design </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Wechat Game Development]]></title>
      <url>/2018/01/25/Wechat-Game-Development/</url>
      <content type="html"><![CDATA[<p>This is a development journal for a simple wechat game.</p>
<p>Outside Link <a href="https://mp.weixin.qq.com/debug/wxagame/dev/" target="_blank" rel="noopener">WECHAT HELPER DOCUMENT</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Game Development </tag>
            
            <tag> Wechat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linear Programming]]></title>
      <url>/2018/01/10/Linear-Programming/</url>
      <content type="html"><![CDATA[<h1 id="Linear-Progarmming"><a href="#Linear-Progarmming" class="headerlink" title="Linear Progarmming"></a>Linear Progarmming</h1><p>Algorithm in Primal Dual Simplex</p>
<pre><code>Procedure Simplex_Primal_Dual(A,b,c,x,unbounded,y) 
    {A:input matrix // b:known term vector}
    {c: cost vector // x: feasible solution}
    {y: optimal solution of D}
    //////////
    begin
    optimal:=false; unbounded:=false;
    I:={i: Aix=bi};
    {Select the active constraints}
    if I==None then grow_along(c,x,I,unbounded); 
    while not optimal or not unbounded do 
        begin
        {g means yita and e means yipxilun}
        if {gAI=c} has no solution then 
            begin compute e&lt;: AIe=0, ce=1; grow_along(e,x,I,unbounded); end;
        else if {gAI=c} has a solution and exists h: gh&lt;0 then 
            begin compute e: AIe=uh; grow_along(e,x,I,unbounded); end;
        else optimal:=true; 
        {the dual system has a solution: gAI=c, g&gt;=0} 
        end;
    end.
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> Foundations of Operations Research </tag>
            
            <tag> Linear Programming </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Graphs and Network Flows]]></title>
      <url>/2018/01/09/Graphs-and-Network-Flows/</url>
      <content type="html"><![CDATA[<h1 id="Defination"><a href="#Defination" class="headerlink" title="Defination"></a>Defination</h1><ul>
<li>G=(N,A)</li>
<li>Path</li>
<li>Closed Path</li>
<li>Simple Path: path with no repeated arcs</li>
<li>Elementary path: a path with no repeated nodes</li>
<li>Cycle</li>
<li>Hamilton Cycle: a cycle having all nodes in the G(N,A)</li>
<li>Eulerian Cycle: a cycle having all arcs in the G(N,A)</li>
</ul>
<h1 id="Undirected-graphs-spanning-tree-and-Hamiltonian-circuit"><a href="#Undirected-graphs-spanning-tree-and-Hamiltonian-circuit" class="headerlink" title="Undirected graphs: spanning tree and Hamiltonian circuit"></a>Undirected graphs: spanning tree and Hamiltonian circuit</h1><ul>
<li><p>Spanning tree: formulation and a solution algorithm</p>
<blockquote>
<p>  The algorithm we are considering iteratively builds a solution starting from the empty one, and at each new step adds a new arc to the set of those that had been chosen. Two criteria must be established to guarantee the correct functioning of the algorithm: <em>i) the order according to which we should select the arcs to be put in the solution;</em> <em>ii) the criterion according to which we decide to add an arc to those already existing.</em></p>
<p>  i) Considering the order, we are guided by arc weights. So we begin by considering the arcs with lighter weight and end with the heavier ones.</p>
<p>  ii) An arc is added to the current solution only if the set of arcs, so augmented, can be part of a feasible solution. In the considered case this means that the arc added to the solution must not form cycles with the chosen arcs. Otherwise, we would come to a redundant solution.</p>
</blockquote>
</li>
<li><p>Minimum cost Hamiltonian circuit</p>
<blockquote>
<p>  Traveling Salesperson Problem</p>
</blockquote>
</li>
</ul>
<h1 id="Graph-connection-search-algorithm"><a href="#Graph-connection-search-algorithm" class="headerlink" title="Graph connection: search algorithm"></a>Graph connection: search algorithm</h1><p>Property: path or cut</p>
<p>Let there be a digraph G=(N,A) with s and t∈N. Only one of the following statements is valid:</p>
<p><em>i) there exists a path directed from s to t</em></p>
<p><em>ii) there exists a cut (Ns, Nt) such that s∈Ns and t∈Nt, and there exist no arcs being in accordance with the cut, that is to say all arcs (i,j)∈A crossing the cut have i∈Nt and j∈Ns</em></p>
<p>A simple but extremely important algorithm is the one performing the search of digraph G starting from a root node s. The algorithm restores a vector of predecessors. The predecessor P[i] of a node i provides the immediately preceding node i in the path directed from s to i. If at the end of the algorithm a node has predecessor equal to zero, this means that the node is not reachable from r.</p>
<p>Algorithms</p>
<pre><code>Procedure Search (G=(N,A),s,P): 
    begin
        for i := 1 to n do P[i] :=0; P[s] := s; Q := {s}; 
        {initialization, s is the start point} 
        repeat
            select i from Q; Q:=Q\{i};     
            {selection and removal of a node from Q} 
            for each (i,j) ∈ FS(i) do
                if P[j]=0
                    then 
                        begin P[j]:=i; 
                        Q:=Q∪{j}
                    end; 
        until Q = ø
    end
</code></pre><h1 id="Shortest-Paths"><a href="#Shortest-Paths" class="headerlink" title="Shortest Paths"></a>Shortest Paths</h1><ul>
<li>Shortest-path tree algorithm on acyclic graphs<blockquote>
<p>  Let there be an acyclic weighted digraph G=(N,A). Note that both application examples seen above give rise to a graph of this type. In order to verify whether a graph is acyclic, we just need to check if it is possible to renumber the graph nodes so that <em>if (i,j)∈A then i&lt;j</em>.</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>  Algorithms</p>
</blockquote>
<pre><code>Procedure Topological_numbering(N,A,φ,x) 
    begin
        if ∃ i∈N: BS(i)=ø 
            {i is the root node, with no BS}
            then φ(i)=x; 
            Topological_numbering(N\{i}, A\FS(i),x+1)
        else if N≠ø 
            then return(&quot;Non-acyclic graph&quot;) 
    end.
</code></pre><blockquote>
<p>  From now on we assume G to be topologically numbered. Wishing to find the shortest-path tree with root 1, we can proceed by induction. We associate with each node i a label d[i] providing the length of the shortest path from 1 to i. A possible algorithm proceeds according to the following inductive rule:</p>
<p>  d[1] = 0;</p>
<p>  d[k] = min {d[i] + c_ik, i=1,…,k-1}, k=2,…,n.</p>
</blockquote>
<ul>
<li>Shortest-path tree algorithm on acyclic graphs (II)<blockquote>
<p>  A further and equivalent method visits the forward stars of each node. In this case, node labels are gradually updated as a better route is found. At the beginning, except for node 1 whose label is definitively fixed at value 0, labels are set equal to a very high value, such that any path from 1 to the node in question is shorter than that value.</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>  Algorithms</p>
</blockquote>
<pre><code>    Procedure SPT_Acyclic (P,d) 
        begin
            P[1]:=1; d[1]:=0; 
            {P note the BS ndoe and d note the cost from root to this node}
            for i:=2 to n 
                do 
                    begin 
                        P[i]:=1; 
                        d[i]:=M 
                    end; 
            {Initialization}

            for i:=1 to n-1 do
                for each (i,j)∈FS(i) 
                    do
                        if d[i]+cij &lt; d[j] 
                            then 
                                begin 
                                    P[j]:=i; 
                                    d[j]:=d[i]+cij 
                                end
        end
</code></pre><ul>
<li>Dijkstra’s algorithm<blockquote>
<p>  We are now going to present an algorithm which, under appropriate hypotheses, behaves like SPT_Acyclic on non-acyclic graphs as well. The algorithm uses a set Q into which are introduced nodes whose forward star must be explored. <strong>Initially Q contains only the root node. Every time a node label is updated, the node, if not already there, is introduced into Q. The key instruction of the algorithm is the selection from Q of the node from which the graph search is to be continued. In the case of the SPT_Acyclic algorithm nodes were examined according to the topological ordering given by the numbering. In order to have the certainty of a similar behavior, and in particular the certainty that an examined node will never be introduced into Q again, the algorithm examines each time the node i having the smallest d[i] label.</strong></p>
</blockquote>
</li>
</ul>
<blockquote>
<p>  Algorithms</p>
</blockquote>
<pre><code>    Procedure SPT_Dijkstra (r,P,d) 
        begin
            for i:=1 to n 
                do 
                    begin 
                        P[i]:=r; 
                        d[i]:=M;
                        {P note the BS node and d note the distance to this node}
                        {M is a relative big value, to be more specific, infinite}
                    end; 
            d[r]:=0; Q:={r}; 
            {initialization} 
        repeat
            select i from Q such that d[i]=min{d[h]: h∈Q}; 
            {smallest label node is selected} 
            Q:=Q\{i};
            for each (i,j)∈FS(i) 
                do
                    if d[i]+cij &lt; d[j] 
                        then
                            begin 
                                P[j]:=i; 
                                d[j]:=d[i]+cij; 
                                if j∈Q 
                                    then Q:=Q∪{j} 
                                end 
        until Q=∅
end.
</code></pre><ul>
<li>SPT_L (label correcting) algorithm<blockquote>
<p>  If the graph is not acyclic and some of the lengths associated with arcs are negative, the properties seen above do not hold any more. In particular, it is not necessarily true that a node, once selected from  Q, cannot enter it again.</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>  Algorithms</p>
</blockquote>
<pre><code>    Procedure SPT_L (r,P,d) 
        begin
            for i:=1 to n 
                do begin P[i]:=r; d[i]:=M end; d[r]:=0; 
            {Initialization}
            repeat
                select i from Q; Q:=Q\{i}; 
                {insertions into and selections from Q are performed according to a FIFO policy} 
                {(Q is a queue)}
                for each (i,j)∈FS(i) do
                    if d[i]+cij &lt; d[j] then
                        begin
                            P[j]:=i; d[j]:=d[i]+cij; 
                            Q:=Q∪{j} 
                        end
            until Q=∅ end.
</code></pre><h1 id="Maximum-Flow"><a href="#Maximum-Flow" class="headerlink" title="Maximum Flow"></a>Maximum Flow</h1><p>Properties of flows and cuts</p>
<p>A partition of the nodes into two subsets (Ns,Nt) such that s∈Ns, and t∈Nt, is called s-t cut. The arcs crossing the cut (having one endpoint in Ns and the other in Nt) are themselves partitioned into two subsets: the set of direct arcs A+(Ns,Nt)={(i,j)∈A: i∈Ns,j∈Nt}, and the set of inverse arcs A- (Ns,Nt)={(i j)∈A: i∈Nt,j∈Ns}.</p>
<p>x(Ns,Nt)= ∑ xij((i,j)belongs to A+)– ∑ xij((i,j)belongs to A-).</p>
<ul>
<li>Augmenting path algorithm<br>We try to solve the problem incrementally: given a feasible flow, we test if it is improvable, i.e., if there exists a way of routing more flow from s to t. In order to discover if such flow augmentation is practicable, we introduce the residual graph of a flow x’. Given a graph G=(N,A) with capacity on the arcs u and a feasible flow x’, we define the residual graph GR(x’) = (N,A(x’)), where arcs are defined as follows:</li>
</ul>
<blockquote>
<p>  A(x’) = A+(x’) ∪ A-(x’),</p>
<p>  A+(x’) = {(i,j): (i,j)∈A, xij’&lt;uij}     // could increased</p>
<p>  A-(x’) = {(i,j): (j,i)∈A, xji’&gt;0}.      // could decreased</p>
</blockquote>
<p>Given a feasible flow x’, consider the residual graph GR(x’). Searching for a path from s to t, corresponding to a possible flow augmentation, two exclusive cases may occur:</p>
<p><em>i) there exists a path from s to t in GR(x’);</em></p>
<p><em>ii) there exists a cut (Ns,Nt) in GR(x’) such that A-(x’)(Ns,Nt) = ∅.</em></p>
<p>In the first case the flow x’ is not optimal and it can be increased by a strictly positive quantity, whereas in the second case x’ is optimal.</p>
<p>In the first case we found an augmenting path (on which the flow can be varied without violating the capacity constraints). Let Pst be such path. Now we define the maximum quantity of flow θ that can be sent on the detected path and that is defined by the minimum of residual capacities of the corresponding arcs on the original graph:</p>
<blockquote>
<p>  θ is the minimum value of the uij-x’ij : (i,j)∈A + (x’) intersect with Pst and x’ij: (i,j)∈A-(x’) intersect with Pst</p>
</blockquote>
<h1 id="Minimum-Cost-Flow"><a href="#Minimum-Cost-Flow" class="headerlink" title="Minimum Cost Flow"></a>Minimum Cost Flow</h1><p>The minimum cost flow problem is a problem of optimization on networks of a more general kind: both the maximum flow problem and the shortest-path tree problem may be viewed as particular cases of the minimum cost flow problem. A network flow is specified by a digraph G=(N,A); with each node i∈N we associate a value bi (called balance of the node); with each arc (i,j) we associate the unit cost cij and a capacity uij limiting the maximum quantity of flow that can transit. Balances at nodes regulate the flow on the network.</p>
]]></content>
      
        
        <tags>
            
            <tag> POLIMI </tag>
            
            <tag> Graphs </tag>
            
            <tag> Network Flows </tag>
            
            <tag> Algorithms </tag>
            
            <tag> Foundations of Operations Research </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo Writing Formulation]]></title>
      <url>/2017/12/28/Hexo-Writing-Formulation/</url>
      <content type="html"><![CDATA[<p>This is a writing test for HEXO under the theme of material</p>
<h1 id="Block-Quote"><a href="#Block-Quote" class="headerlink" title="Block Quote"></a>Block Quote</h1><ul>
<li>Block without source<pre><code>{% blockquote %}
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.
    {% endblockquote %}
</code></pre><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>
</blockquote>
</li>
</ul>
<ul>
<li>Block with source<pre><code>{% blockquote David Levithan, Wide Awake %}
    Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.
    {% endblockquote %}
</code></pre><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>
<footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote>
</li>
</ul>
<h1 id="Quote-from-Twitter"><a href="#Quote-from-Twitter" class="headerlink" title="Quote from Twitter"></a>Quote from Twitter</h1><pre><code>    {% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %}
    NEW: DevDocs now comes with syntax highlighting. http://devdocs.io
    {% endblockquote %}
</code></pre><blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io" target="_blank" rel="noopener">http://devdocs.io</a></p>
<footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752" target="_blank" rel="noopener">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote>
<h1 id="Quote-from-other-resource"><a href="#Quote-from-other-resource" class="headerlink" title="Quote from other resource"></a>Quote from other resource</h1><pre><code>    {% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %}
    Every interaction is both precious and an opportunity to delight.
    {% endblockquote %}
</code></pre><blockquote><p>Every interaction is both precious and an opportunity to delight.</p>
<footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html" target="_blank" rel="noopener">Welcome to Island Marketing</a></cite></footer></blockquote>
<h1 id="Quote-an-Image-from-default-path"><a href="#Quote-an-Image-from-default-path" class="headerlink" title="Quote an Image from default path"></a>Quote an Image from default path</h1><pre><code>{% asset_img example.png This is an example image %}
</code></pre><img src="/2017/12/28/Hexo-Writing-Formulation/example.png" title="This is an example image">
<h1 id="Paragraph"><a href="#Paragraph" class="headerlink" title="Paragraph"></a>Paragraph</h1><pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
&gt;
&gt; &gt; And Here is a nested quote block.
&gt;
&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.
&gt; 
&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
&gt; id sem consectetuer libero luctus adipiscing.
</code></pre><blockquote>
<p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</p>
<blockquote>
<p>And Here is a nested quote block.</p>
</blockquote>
<p>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p>
<p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.</p>
</blockquote>
<h1 id="Unorder-List-Item"><a href="#Unorder-List-Item" class="headerlink" title="Unorder List Item"></a>Unorder List Item</h1><pre><code>*   This is a list item with two paragraphs.

    This is the second paragraph in the list item. You&#39;re
only required to indent the first line. Lorem ipsum dolor
sit amet, consectetuer adipiscing elit.

*   Another item in the same list.

    &gt; This is a quote.
</code></pre><ul>
<li><p>This is a list item with two paragraphs.</p>
<p>This is the second paragraph in the list item. You’re<br>only required to indent the first line. Lorem ipsum dolor<br>sit amet, consectetuer adipiscing elit.</p>
</li>
<li><p>Another item in the same list.</p>
<blockquote>
<p>This is a quote.</p>
</blockquote>
</li>
</ul>
<h1 id="Strongthen-text"><a href="#Strongthen-text" class="headerlink" title="Strongthen text"></a>Strongthen text</h1><pre><code>*single asterisks*

_single underscores_

**double asterisks**

__double underscores__
</code></pre><p><em>single asterisks</em></p>
<p><em>single underscores</em></p>
<p><strong>double asterisks</strong></p>
<p><strong>double underscores</strong></p>
<h1 id="Attach-a-link"><a href="#Attach-a-link" class="headerlink" title="Attach a link"></a>Attach a link</h1><pre><code>[Cesare&#39;s Homepage](https://cesaremjli.github.io/)
</code></pre><p><a href="https://cesaremjli.github.io/" target="_blank" rel="noopener">Cesare’s Homepage</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Markdown Language </tag>
            
            <tag> HEXO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Binary Trees]]></title>
      <url>/2017/12/19/Binary-Trees/</url>
      <content type="html"><![CDATA[<p>A short introduction of binary trees and its use in Python.</p>
<h1 id="Description-of-the-binary-tree-problems"><a href="#Description-of-the-binary-tree-problems" class="headerlink" title="Description of the binary tree problems"></a>Description of the binary tree problems</h1><p><strong>Preorder Traversals</strong></p>
<p>Count the node whenever it is the first time you reach it</p>
<p><strong>Inorder Traversals</strong></p>
<p>Count the node in the order just like spanning all the nodes in the horizontal plane</p>
<blockquote>
<p><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/description/" target="_blank" rel="noopener">Description of one situation</a>:</p>
<blockquote>
<p>Given a binary tree, return the inorder traversal of its nodes’ values.</p>
<ul>
<li>algorithm</li>
</ul>
</blockquote>
</blockquote>
<pre><code>class TreeNode(object):
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

class Solution(object):
    def inorderTraversal(self, root):
        &quot;&quot;&quot;
        :type root: TreeNode
        :rtype: List[int]
        &quot;&quot;&quot;
        # curNode=root
        res=[1]
        curNode=root
        while curNode!=None:
            if curNode.left==None:
                res.append(curNode.val)
                print curNode.val
                curNode=curNode.right
            else:
                thisNode=curNode
                curNode=curNode.left
                nextNode=curNode
                while nextNode.right!=None:
                    nextNode=nextNode.right
                nextNode.right=thisNode
                thisNode.left=None
        return res[1:]
</code></pre><blockquote>
<p><a href="https://leetcode.com/problems/validate-binary-search-tree/description/" target="_blank" rel="noopener">Description of another situation</a>:</p>
<blockquote>
<p>Given a binary tree, determine if it is a valid binary search tree (BST).<br>Assume a BST is defined as follows:</p>
<ul>
<li>The left subtree of a node contains only nodes with keys less than the node’s key.</li>
<li>The right subtree of a node contains only nodes with keys greater than the node’s key.</li>
<li>Both the left and right subtrees must also be binary search trees.</li>
<li>algorithm</li>
</ul>
</blockquote>
</blockquote>
<pre><code>class TreeNode(object):
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

class Solution(object):
    def isValidBST(self, root):
        &quot;&quot;&quot;
        :type root: TreeNode
        :rtype: bool
        &quot;&quot;&quot;
        stack=[]
        pre=None
        cur=root
        while stack or cur:
            while cur:
                stack.append(cur)
                cur=cur.left
            top=stack.pop()
            if pre is not None and pre&gt;=top.val:
                return False
            pre=top.val
            cur=top.right
        return True
</code></pre><p><strong>Postorder Traversals</strong></p>
<p>Count the node whenever it is the last time  you leave it</p>
]]></content>
      
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Binary Trees </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python List]]></title>
      <url>/2017/12/09/Python-List/</url>
      <content type="html"><![CDATA[<p>This journal aims to describe a problem of PYTHON LIST. </p>
<p>The decription of the problem could be found <a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/description/" target="_blank" rel="noopener">here</a> from LEETCODE.</p>
<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.</p>
<p>For example,<br>Given 1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5, return 1-&gt;2-&gt;5.<br>Given 1-&gt;1-&gt;1-&gt;2-&gt;3, return 2-&gt;3.</p>
<h1 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h1><pre><code># Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def deleteDuplicates(self, head):
        &quot;&quot;&quot;
        :type head: ListNode
        :rtype: ListNode
        &quot;&quot;&quot;
        dummyHead=ListNode(0)
        dummyHead.next=head
        curNode=dummyHead

        while curNode!=None:
            nextNode=curNode.next
            if nextNode!=None and nextNode.next!=None and nextNode.val==nextNode.next.val:
                while nextNode!=None and nextNode.next!=None and nextNode.val==nextNode.next.val:
                    nextNode=nextNode.next
                # lastNode.next=nextNode.next
                curNode.next=nextNode.next;
            else:
                curNode=curNode.next

        return dummyHead.next
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> List </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Unity Development Journal]]></title>
      <url>/2017/12/03/Unity-Development-Journal/</url>
      <content type="html"><![CDATA[<p>This journal aims to record the interesting methods and functions used in the <strong>Unity Game Development</strong>.</p>
<h1 id="Useful-External-Links"><a href="#Useful-External-Links" class="headerlink" title="Useful External Links"></a>Useful External Links</h1><p><a href="https://docs.unity3d.com/ScriptReference/index.html" target="_blank" rel="noopener">Unity Scripting API</a>: Unity official programmer API</p>
<p><a href="https://docs.unity3d.com/Manual/index.html" target="_blank" rel="noopener">Unity User Manual</a>: Unity official user manual</p>
<p><a href="https://cowlevel.net/feed" target="_blank" rel="noopener">Cow Level</a>: Game news and evaluations</p>
<p><a href="https://www.indienova.com/" target="_blank" rel="noopener">Indie Nova</a>: Game developments</p>
<h1 id="Unity-Development-Process"><a href="#Unity-Development-Process" class="headerlink" title="Unity Development Process"></a>Unity Development Process</h1><blockquote>
<p><em>Player</em></p>
<ul>
<li>Player Tranforms</li>
</ul>
</blockquote>
<pre class=" language-css"><code class="language-css">    <span class="token selector">void Start () 
    </span><span class="token punctuation">{</span>
        // Debug<span class="token number">.</span>Log <span class="token punctuation">(</span><span class="token string">"I AM "</span> + gameObject<span class="token number">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

        _transform = GetComponent&lt;Transform><span class="token punctuation">(</span><span class="token punctuation">)</span> as Transform<span class="token punctuation">;</span>
        _animator = GetComponent&lt;Animator><span class="token punctuation">(</span><span class="token punctuation">)</span> as Animator<span class="token punctuation">;</span>
        _rigidbody = GetComponent&lt;Rigidbody<span class="token number">2</span>D><span class="token punctuation">(</span><span class="token punctuation">)</span> as Rigidbody<span class="token number">2</span>D<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">void Update () 
    </span><span class="token punctuation">{</span>    
        <span class="token selector">m_horizontal = Math<span class="token class">.Sign</span>(Input<span class="token class">.GetAxis</span> ("Horizontal"));
        m_vertical = Math<span class="token class">.Sign</span>(Input<span class="token class">.GetAxis</span> ("Vertical"));    

        _transform<span class="token class">.position</span> = _transform<span class="token class">.position</span> +
            _transform<span class="token class">.right</span> * m_horizontal * m_speed * Time<span class="token class">.deltaTime</span> +
            _transform<span class="token class">.up</span> * m_vertical * m_speed * Time<span class="token class">.deltaTime</span>;

        if (Input<span class="token class">.GetKeyDown</span>(KeyCode<span class="token class">.J</span>))
        </span><span class="token punctuation">{</span>
            <span class="token comment" spellcheck="true">/* Whenever it detects some key on the keyboard, do Something */</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p><em>Animation</em> </p>
</blockquote>
<pre><code>Firstly, add an animation controller in the object to be attached with an animation.
Then drag the animation controller on to the game object
</code></pre><ul>
<li>Transition Control<pre class=" language-css"><code class="language-css">_animator<span class="token number">.</span><span class="token function">SetInteger</span><span class="token punctuation">(</span><span class="token string">"ParameterName"</span>,n<span class="token punctuation">)</span><span class="token punctuation">;</span>
_animator<span class="token number">.</span><span class="token function">SetBoolean</span><span class="token punctuation">(</span><span class="token string">"ParameterName"</span>,true/false<span class="token punctuation">)</span><span class="token punctuation">;</span>
_animator<span class="token number">.</span><span class="token function">SetTrigger</span><span class="token punctuation">(</span><span class="token string">"ParameterName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
</ul>
<blockquote>
<p><em>Game Object</em></p>
<ul>
<li>Instantiate Prefabs</li>
</ul>
</blockquote>
<pre><code>We could create game objects according to the predefined game objects. 
First create an empty game object, and then attach this scripts into this
game object.
</code></pre><pre class=" language-css"><code class="language-css">    <span class="token selector">public class InstantiateObj : MonoBehaviour </span><span class="token punctuation">{</span>

    <span class="token selector">public Transform prefab;

    public float timeDif=0<span class="token class">.5f</span>;
    private float nextTime;

    void Start () </span><span class="token punctuation">{</span>
        nextTime=<span class="token number">0.0</span>f<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token selector">void Update () </span><span class="token punctuation">{</span>
        <span class="token selector">if(Time<span class="token class">.time</span>>nextTime)</span><span class="token punctuation">{</span>
            <span class="token function">Instantiate</span><span class="token punctuation">(</span>prefab<span class="token punctuation">)</span><span class="token punctuation">;</span>
            nextTime=nextTime+timeDif<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<blockquote>
<p><em>Sound Manager</em></p>
</blockquote>
<pre><code>Create an empty game object, and then add the sound scripts into the inspector, 
and then add different sound source and sound clips into the object. Meanwhile
we always put the audio listener onto the main camera.
</code></pre><ul>
<li><p>Sound Manager Scripts</p>
<pre class=" language-css"><code class="language-css"><span class="token selector">public class SoundManager : MonoBehaviour </span><span class="token punctuation">{</span>

<span class="token selector">public static SoundManager Instance;

<span class="token attribute">[Header("Sound Source")]</span>
public AudioSource as;
public AudioClip ac;
public AudioClip ac2;

<span class="token attribute">[Header("Soundtrack")]</span>
public AudioSource as_bgm_future;
public AudioClip ac_bgm_future;

<span class="token attribute">[Header("Soundtrack")]</span>
public AudioSource as_bgm_past;
public AudioClip ac_bgm_past;

float timeStamp;

// Use this for initialization
void Awake () </span><span class="token punctuation">{</span>
    <span class="token selector">if (Instance == null)
    </span><span class="token punctuation">{</span>
        Instance = this<span class="token punctuation">;</span>
        <span class="token function">DontDestroyOnLoad</span><span class="token punctuation">(</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">else
    </span><span class="token punctuation">{</span>
        <span class="token function">Destroy</span><span class="token punctuation">(</span>gameObject<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token selector">void Start()</span><span class="token punctuation">{</span>
    as_bgm_future<span class="token number">.</span>clip = ac_bgm_future<span class="token punctuation">;</span>
    as_bgm_past<span class="token number">.</span>clip = ac_bgm_past<span class="token punctuation">;</span>
    as_bgm_future<span class="token number">.</span><span class="token function">Play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">public void PlayeOneTime()</span><span class="token punctuation">{</span>
    as<span class="token number">.</span><span class="token function">PlayOneShot</span><span class="token punctuation">(</span>ac<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">public void SwitchBGMandPitch(bool flag)</span><span class="token punctuation">{</span>
    <span class="token selector">as_bgm_past<span class="token class">.pitch</span>=1<span class="token class">.0f</span>;
    as_bgm_future<span class="token class">.pitch</span>=1<span class="token class">.0f</span>;
    if (flag)</span><span class="token punctuation">{</span>
        as_bgm_past<span class="token number">.</span><span class="token function">Pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        as_bgm_future<span class="token number">.</span><span class="token function">Play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token selector">else</span><span class="token punctuation">{</span>
        as_bgm_future<span class="token number">.</span><span class="token function">Pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        as_bgm_past<span class="token number">.</span><span class="token function">Play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
</li>
<li>Whenever it is used in another scripts<pre class=" language-css"><code class="language-css">SoundManager<span class="token number">.</span>Instance<span class="token number">.</span><span class="token function">FutureTravelToPast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
</li>
</ul>
<blockquote>
<p><em>Camera</em></p>
<ul>
<li>Camera Following</li>
</ul>
</blockquote>
<pre class=" language-css"><code class="language-css"><span class="token selector">public class CameraFollow : MonoBehaviour </span><span class="token punctuation">{</span>
    <span class="token selector">public GameObject player;
    private Vector3 offset;

    void Start () </span><span class="token punctuation">{</span>
        // offset = transform<span class="token number">.</span>position - player<span class="token number">.</span>transform<span class="token number">.</span>position<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token selector">void Update () </span><span class="token punctuation">{</span>
        Vector<span class="token number">3</span> playerPosition =player<span class="token number">.</span>transform<span class="token number">.</span>position<span class="token punctuation">;</span>
        // transform<span class="token number">.</span>position = player<span class="token number">.</span>transform<span class="token number">.</span>position + offset<span class="token punctuation">;</span>
        // if <span class="token punctuation">(</span>playerPosition<span class="token number">.</span>x&lt;-<span class="token number">2.3</span><span class="token punctuation">)</span>
        //     return<span class="token punctuation">;</span>
        transform<span class="token number">.</span>position = new Vector<span class="token number">3</span><span class="token punctuation">(</span>playerPosition<span class="token number">.</span>x,<span class="token number">0</span>,-<span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<h1 id="Some-Tricks"><a href="#Some-Tricks" class="headerlink" title="Some Tricks"></a>Some Tricks</h1><blockquote>
<ol>
<li>The image size of the animation must by unified. Or some effects terrible would happen. All the images must by saved in .png with a tranparent background</li>
<li>Generally speaking, it is always a good idea to put <em>Player</em>, <em>Camera</em>, <em>Sound Manager</em> in a empty game object to manage them.</li>
</ol>
</blockquote>
<h2 id="Cesare-Dec-3-2017"><a href="#Cesare-Dec-3-2017" class="headerlink" title="Cesare Dec 3 2017"></a>Cesare Dec 3 2017</h2>]]></content>
      
        
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[A Simple Python Depth First Search]]></title>
      <url>/2017/11/30/A-Simple-Python-Depth-First-Search/</url>
      <content type="html"><![CDATA[<p>Depth First Search in some real problems.</p>
<h1 id="Description-of-8-queens-Problem"><a href="#Description-of-8-queens-Problem" class="headerlink" title="Description of 8-queens Problem"></a>Description of 8-queens Problem</h1><p>Here is the description of <a href="https://leetcode.com/problems/n-queens/description/" target="_blank" rel="noopener">8-QUEEN PROBLEM</a>.</p>
<p>The n-queens puzzle is the problem of placing n queens on an n×n chessboard such that no two queens attack each other.</p>
<p>Given an integer n, return all distinct solutions to the n-queens puzzle.</p>
<p>Each solution contains a distinct board configuration of the n-queens’ placement, where ‘Q’ and ‘.’ both indicate a queen and an empty space respectively</p>
<h1 id="Solution-in-python-DFS"><a href="#Solution-in-python-DFS" class="headerlink" title="Solution(in python - DFS)"></a>Solution(in python - DFS)</h1><pre><code>    class Solution(object):
        def solveNQueens(self, n):
            &quot;&quot;&quot;
            :type n: int
            :rtype: List[List[str]]
            &quot;&quot;&quot;
            def DFS(queens, xy_dif,xy_sum):
                l=len(queens)
                if l==n:
                    result.append(queens)
                    return None
                for p in range(n):
                    if p not in queens and l-p not in xy_dif and l+p not in xy_sum:
                        DFS(queens+[p],xy_dif+[l-p],xy_sum+[l+p])
            result=[]
            DFS([],[],[])
            print result
            return [[&#39;.&#39;*i+&#39;Q&#39;+&#39;.&#39;*(n-i-1) for i in sol]for sol in result]
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> Depth First Search </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
